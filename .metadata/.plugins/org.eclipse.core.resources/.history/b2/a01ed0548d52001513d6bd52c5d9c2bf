
package org.usfirst.frc.team3067.robot;

import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Jaguar;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.Victor;


public class Robot extends IterativeRobot {
	
    Talon front_right = new Talon(0);
    Talon front_left = new Talon(1);
    Talon back_right = new Talon(2);
    Talon back_left = new Talon(3);
    
    Victor shoot = new Victor(4);
    
    Jaguar lift = new Jaguar(5);
    
    RobotDrive chassis = new RobotDrive(front_left, back_left, front_right, back_right);
    
    Joystick rightStick = new Joystick(0);
    Joystick leftStick = new Joystick(1);
    Joystick xbox = new Joystick(2);
    
    Compressor comp = new Compressor(0);
    Solenoid liftUp = new Solenoid(0);
    Solenoid liftDown = new Solenoid(1);
    Solenoid shootOut = new Solenoid(2);
    Solenoid shootIn = new Solenoid(3);
	
    public String turningSide = "right";
	/*
	 * (non-Javadoc)
	 * Run once at the startup of the robot - Setup devices - Setup joystick - "Configuration state"
	 */
    public void robotInit() { 
    	comp.setClosedLoopControl(true); //Runs the comp if the Working PSI drops below 120
    
    	liftDown.set(true); //Sets pnuematic defaults 
		liftUp.set(false);
		shootIn.set(true);
		shootOut.set(false);
		String turningside = "right";
    }

   /*
    * (non-Javadoc)
    * Runs periodically - Auton - Driving - Shooting - Vision tracking
    */
    public void autonomousPeriodic() {
    	
    	if (leftStick.getZ() > 0) { // -1 to 1
    		turningSide = "right";
    	}
    	else if (leftStick.getZ() <= 0) {
    		turningSide = "left";
    	}
    	
    	setAllMotors(1.0);
    	Timer.delay(.5);
    	setAllMotors(0.0);
    	setTurningSpeed(.5, turningSide);
    	Timer.delay(.25);
    	setAllMotors(0.0);
    	Timer.delay(.25);
    	setAllMotors(1.0);
    	
    }
    
    private void setTurningSpeed(double speed, String side) {
    	if (side.equalsIgnoreCase("right")) {
    		front_right.set(speed);
    		back_right.set(speed);
    		front_left.set(-speed);
    		back_left.set(-speed);
    	}
    	else if (side.equalsIgnoreCase("left")) {
    		front_right.set(-speed);
    		back_right.set(-speed);
    		front_left.set(speed);
    		back_left.set(speed);
    	}
    	else {
    		front_right.set(speed);
    		back_right.set(speed);
    		front_left.set(-speed);
    		back_left.set(-speed);
    	}
    }

    private void setAllMotors(double speed) {
		front_right.set(speed);
		back_right.set(speed);
		front_left.set(speed);
		back_left.set(speed);
		
	}

	/*
     * (non-Javadoc)
     * Driver control - Joystick input - reactions to those inputs
     */
    public void teleopPeriodic() { //Remember you only need one type of robot drive
    	
    	chassis.arcadeDrive(rightStick.getY(), rightStick.getX()); // Driving robot with one joystick
    	
    	chassis.tankDrive(leftStick.getY(), rightStick.getY()); // 2 joystick setup for driving robot
    	
    	chassis.mecanumDrive_Polar(rightStick.getY(), rightStick.getX(), rightStick.getZ()); // Mecanum drive using all 3 axis from a joystick
    	
    	
    	if (rightStick.getRawButton(1)) { //If you press the trigger
    		front_left.set(.5); // Do this stuff
    	}
    	else {
    		front_left.set(0.0); //Otherwise default to this stuff
    	}
    	
    	if (xbox.getRawButton(3)) {
    		setAllMotors(1.0);
    	}
    	else {
    		setAllMotors(0.0);
    	}
    	
    	if (leftStick.getRawButton(10)) { //Lift the lifter
    		liftDown.set(false);
    		liftUp.set(true);
    	}
    	else { //Defaults to the down position
    		liftDown.set(true);
    		liftUp.set(false);
    	}
    	    	
    }
    
    /*
     * (non-Javadoc)
     * Test function from the driver station 
     */
    public void testPeriodic() {
    	
    	if (leftStick.getRawButton(10)) { //Lift the lifter
    		liftDown.set(false);
    		liftUp.set(true);
    	}
    	else { //Defaults to the down position
    		liftDown.set(true);
    		liftUp.set(false);
    	}
    	
    	if (leftStick.getRawButton(11)) {//Shoots the mechanism
    		shootOut.set(true);
    		shootIn.set(false);
    	}
    	else { //Defaults to the loaded position
    		shootIn.set(true);
    		shootOut.set(false);
    	}
    
    }
    
}
